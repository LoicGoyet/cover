@import 'parameters';

@if type-of($cover--height) != 'map' and type-of($cover--height) != 'number' and $cover--height != auto {
  @error 'Variable $cover--height must be a map or number';
}

@mixin bottom-rounded {
  width: auto;
  height: 100%;
  left: nth($cover--round, 1);
  right: nth($cover--round, 1);
  border-bottom-left-radius: nth($cover--round, 2);
  border-bottom-right-radius: nth($cover--round, 2);
}

@mixin cover--height($var) {
  @if type-of($var) == 'number' {
    height: $var;
  } @elseif type-of($var) == 'map' {
    @each $viewport, $height in $var {
      @if $viewport == 'default' {
        height: $height;
      } @else {
        @if is-breakpoint($viewport) {
          @include media-query($viewport, 'mobile-first') {
            height: $height;
          }
        }
      }
    }
  }
}

.cover {
  @include cover--height($cover--height);
  background-position: center;
  background-size: cover;
  position: relative;
  overflow: hidden;

  @if variable-exists(cover--color) and $cover--color != false {
    color: $cover--color;
  }
}

@if variable-exists(cover--overlay) and $cover--overlay != false {
  .cover--overlay {
    &::before {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: 2;

      @if type-of($cover--overlay) == 'color' {
        background-color: $cover--overlay;
      } @else if type-of($cover--overlay) == 'list' {
        background: linear-gradient(nth($cover--overlay, 1), nth($cover--overlay, 2));
      }
    }

    @if variable-exists(cover--round) and $cover--round != false {
      &.cover--rounded {
        &::before {
          @include bottom-rounded;
        }
      }
    }
  }
}

@each $size, $heights in $cover--sizes {
  .cover--#{$size} {
    @include cover--height($heights);
  }
}

.cover__bg {
  position: absolute;
  z-index: 1;
  background-position: center;
  background-size: cover;
  width: 100%;
  height: 100%;

  @if variable-exists(cover--round) and $cover--round != false {
    .cover--rounded & {
      @include bottom-rounded;
    }
  }
}

.cover__bg--parallax {
  background-attachment: fixed;
  transform: translate3d(0, 0, 0);
}

.cover__body {
  position: absolute;
  z-index: 3;
}

.cover__body--full {
  top: $cover-content--margin;
  right: $cover-content--margin;
  bottom: $cover-content--margin;
  left: $cover-content--margin;
}

.cover__body--fluid {
  position: relative;
  padding: $cover-content--margin;
}

@each $direction-x in (left, right, center, full) {
  @each $direction-y in (top, bottom, center, full) {
    .cover__body--#{$direction-x}-#{$direction-y} {
      $translate-x: 0;
      @if $direction-x == center {
        left: 50%;
        $translate-x: -50%;
      } @elseif $direction-x == full {
        left: 0;
        right: 0;
      } @else {
        #{$direction-x}: 0;
        margin-#{$direction-x}: $cover-content--margin;
      }

      $translate-y: 0;
      @if $direction-y == center {
        top: 50%;
        $translate-y: -50%;
      } @elseif $direction-y == full {
        top: 0;
        bottom: 0;
      } @else {
        #{$direction-y}: 0;
        margin-#{$direction-y}: $cover-content--margin;
      }

      @if $translate-x != 0 or $translate-y != 0 {
        transform: translate($translate-x, $translate-y);
      }
    }
  }
}
